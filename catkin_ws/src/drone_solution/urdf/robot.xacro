<?xml version='1.0'?>

<robot name="robot" xmlns:xacro="http://www.ros.org/wiki/xacro">

  <xacro:property name="camera_width" value="0.02"/>
  <xacro:property name="camera_length" value="0.02"/>
  <xacro:property name="camera_height" value="0.01"/>
  <xacro:property name="camera_mass" value="0.01"/>
  <xacro:property name="chassis_width" value="0.15"/>
  <xacro:property name="chassis_length" value="0.2"/>
  <xacro:property name="chassis_height" value="0.05"/>
  <xacro:property name="chassis_mass" value="0.5"/>
  <xacro:property name="wheel_radius" value="0.04"/>
  <xacro:property name="wheel_width" value="0.03"/>
  <xacro:property name="wheel_mass" value="0.025"/>

  <!--<xacro:include filename="/catkin_ws/src/gazebo-line-follower-master/urdf/macros.xacro"/>-->
  <xacro:include filename="/catkin_ws/src/gazebo-line-follower-master/urdf/materials.xacro"/>

  <link name='chassis'>
  <inertial name="chassis_inertial">
    <mass value="${chassis_mass}"/>
    <inertia  ixx="${chassis_mass*(chassis_width*chassis_width+chassis_height*chassis_height)/12}" ixy = "0" ixz = "0"
      iyy="${chassis_mass*(chassis_length*chassis_length+chassis_width*chassis_width)/12}" iyz = "0"
      izz="${chassis_mass*(chassis_length*chassis_length+chassis_height*chassis_height)/12}"/>
  </inertial>

    <collision name='chassis_collision'>
      <geometry>
        <box size="${chassis_length} ${chassis_width} ${chassis_height}"/>
      </geometry>
    </collision>
    <visual name='chassis_visual'>
      <origin xyz="0 0 0" rpy=" 0 0 0"/>
      <geometry>
        <box size="${chassis_length} ${chassis_width} ${chassis_height}"/>
      </geometry>
      <material name="Cyan">
        <color rgba="0 1.0 1.0 1.0"/>
      </material>
    </visual>
  </link>

  <link name='wheel_FR'>
<inertial name="wheel_FR_inertial">
    <mass value="${wheel_mass}"/>
    <inertia  ixx="${wheel_mass*(3*wheel_radius*wheel_radius+wheel_width*wheel_width)/12}" ixy = "0" ixz = "0"
      iyy="${wheel_mass*(3*wheel_radius*wheel_radius+wheel_width*wheel_width)/12}" iyz = "0"
      izz="${wheel_mass*wheel_radius*wheel_radius/2}"/>
  </inertial>
    <collision name='wheel_FR_collision'>
      <origin xyz="0 0 0" rpy="1.5708 0 0"/>    
      <geometry>
        <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
      </geometry>
    </collision>
    <visual name='wheel_FR_visual'>
      <origin xyz="0 0 0" rpy="1.5708 0 0"/>
      <geometry>
        <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
      </geometry>
    </visual>
  </link>

  <link name='wheel_FL'>
<inertial name="wheel_FL_inertial">
    <mass value="${wheel_mass}"/>
    <inertia  ixx="${wheel_mass*(3*wheel_radius*wheel_radius+wheel_width*wheel_width)/12}" ixy = "0" ixz = "0"
      iyy="${wheel_mass*(3*wheel_radius*wheel_radius+wheel_width*wheel_width)/12}" iyz = "0"
      izz="${wheel_mass*wheel_radius*wheel_radius/2}"/>
  </inertial>
    <collision name='wheel_FL_collision'>
      <origin xyz="0 0 0" rpy="1.5708 0 0"/>    
      <geometry>
        <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
      </geometry>
    </collision>
    <visual name='wheel_FL_visual'>
      <origin xyz="0 0 0" rpy="1.5708 0 0"/>
      <geometry>
        <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
      </geometry>
    </visual>
  </link>

  <link name='wheel_RR'>
<inertial name="wheel_RR_inertial">
    <mass value="${wheel_mass}"/>
    <inertia  ixx="${wheel_mass*(3*wheel_radius*wheel_radius+wheel_width*wheel_width)/12}" ixy = "0" ixz = "0"
      iyy="${wheel_mass*(3*wheel_radius*wheel_radius+wheel_width*wheel_width)/12}" iyz = "0"
      izz="${wheel_mass*wheel_radius*wheel_radius/2}"/>
  </inertial>
    <collision name='wheel_RR_collision'>
      <origin xyz="0 0 0" rpy="1.5708 0 0"/>    
      <geometry>
        <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
      </geometry>
    </collision>
    <visual name='wheel_RR_visual'>
      <origin xyz="0 0 0" rpy="1.5708 0 0"/>
      <geometry>
        <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
      </geometry>
    </visual>
  </link>

  <link name='wheel_RL'>
<inertial name="wheel_RL_inertial">
    <mass value="${wheel_mass}"/>
    <inertia  ixx="${wheel_mass*(3*wheel_radius*wheel_radius+wheel_width*wheel_width)/12}" ixy = "0" ixz = "0"
      iyy="${wheel_mass*(3*wheel_radius*wheel_radius+wheel_width*wheel_width)/12}" iyz = "0"
      izz="${wheel_mass*wheel_radius*wheel_radius/2}"/>
  </inertial>
    <collision name='wheel_RL_collision'>
      <origin xyz="0 0 0" rpy="1.5708 0 0"/>    
      <geometry>
        <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
      </geometry>
    </collision>
    <visual name='wheel_RL_visual'>
      <origin xyz="0 0 0" rpy="1.5708 0 0"/>
      <geometry>
        <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
      </geometry>
    </visual>
  </link>

  <link name='camera_link'>
<inertial name="camera_link_inertial">
    <mass value="${camera_mass}"/>
    <inertia  ixx="${camera_mass*(camera_length*camera_length+camera_height*camera_height)/12}" ixy = "0" ixz = "0"
      iyy="${camera_mass*(camera_width*camera_width+camera_length*camera_length)/12}" iyz = "0"
      izz="${camera_mass*(camera_width*camera_width+camera_height*camera_height)/12}"/>
  </inertial>
    <collision name='camera_link_collision'>
      <geometry>
        <box size="${camera_length} ${camera_width} ${camera_height}"/>
      </geometry>
    </collision>
    <visual name='camera_link_visual'>
      <origin xyz="0 0 0" rpy=" 0 0 0"/>
      <geometry>
        <box size="${camera_length} ${camera_width} ${camera_height}"/>
      </geometry>
    </visual>
  </link>

  <joint name="wheel_FR_joint" type="continuous">
    <parent link="chassis"/>
    <child link="wheel_FR"/>
    <origin xyz="${chassis_length/2-wheel_radius} -${chassis_width/2+wheel_width/2} 0"
            rpy="0 0 0"/>
    <axis xyz="0 1 0"/>
  </joint>

  <joint name="wheel_FL_joint" type="continuous">
    <parent link="chassis"/>
    <child link="wheel_FL"/>
    <origin xyz="${chassis_length/2-wheel_radius} ${chassis_width/2+wheel_width/2} 0"
            rpy="0 0 0"/>
    <axis xyz="0 1 0"/>
  </joint>

  <joint name="wheel_RR_joint" type="continuous">
    <parent link="chassis"/>
    <child link="wheel_RR"/>
    <origin xyz="-${chassis_length/2-wheel_radius} -${chassis_width/2+wheel_width/2} 0"
            rpy="0 0 0"/>
    <axis xyz="0 1 0"/>
  </joint>

  <joint name="wheel_RL_joint" type="continuous">
    <parent link="chassis"/>
    <child link="wheel_RL"/>
    <origin xyz="-${chassis_length/2-wheel_radius} ${chassis_width/2+wheel_width/2} 0"
            rpy="0 0 0"/>
    <axis xyz="0 1 0"/>
  </joint>

  <joint name="camera_joint" type="fixed">
    <parent link="chassis"/>
    <child link="camera_link"/>
    <origin xyz="${chassis_length/2} 0 ${chassis_height/2+camera_height/2}"/>
  </joint>

  <gazebo reference="chassis">
    <material>Gazebo/Orange</material>
  </gazebo>

  <gazebo reference="camera_link">
  <sensor type="camera" name="camera1">
      <update_rate>30.0</update_rate>
      <camera name="head">
        <horizontal_fov>1.3962634</horizontal_fov>
        <image>
          <width>800</width>
          <height>800</height>
          <format>R8G8B8</format>
        </image>
        <clip>
          <near>0.02</near>
          <far>300</far>
        </clip>
        <noise>
          <type>gaussian</type>
          <!-- Noise is sampled independently per pixel on each frame.
               That pixel's noise value is added to each of its color
               channels, which at that point lie in the range [0,1]. -->
          <mean>0.0</mean>
          <stddev>0.007</stddev>
        </noise>
      </camera>
      <plugin name="camera_controller" filename="libgazebo_ros_camera.so">
        <alwaysOn>true</alwaysOn>
        <updateRate>0.0</updateRate>
        <cameraName>robot/camera</cameraName>
        <imageTopicName>image_raw</imageTopicName>
        <cameraInfoTopicName>camera_info</cameraInfoTopicName>
        <frameName>camera_link</frameName>
        <hackBaseline>0.07</hackBaseline>
        <distortionK1>0.0</distortionK1>
        <distortionK2>0.0</distortionK2>
        <distortionK3>0.0</distortionK3>
        <distortionT1>0.0</distortionT1>
        <distortionT2>0.0</distortionT2>
      </plugin>
    </sensor>
    <material>Gazebo/Blue</material>
  </gazebo>

  <gazebo>
    <plugin name="skid_steer_drive_controller" filename="libgazebo_ros_skid_steer_drive.so">
      <updateRate>100.0</updateRate>
      <robotNamespace>/</robotNamespace>
      <leftFrontJoint>wheel_FL_joint</leftFrontJoint>
      <rightFrontJoint>wheel_FR_joint</rightFrontJoint>
      <leftRearJoint>wheel_RL_joint</leftRearJoint>
      <rightRearJoint>wheel_RR_joint</rightRearJoint>
      <wheelSeparation>${chassis_width}</wheelSeparation>
      <wheelDiameter>${wheel_radius* 2}</wheelDiameter>
      <robotBaseFrame>base_link</robotBaseFrame>
      <torque>20</torque>
      <topicName>cmd_vel</topicName>
      <broadcastTF>false</broadcastTF>
    </plugin>
  </gazebo>

  <gazebo reference="wheel_FL">
    <material>Gazebo/Yellow</material>
  </gazebo>

  <gazebo reference="wheel_FR">
    <material>Gazebo/Yellow</material>
  </gazebo>

  <gazebo reference="wheel_RL">
    <material>Gazebo/Yellow</material>
  </gazebo>

  <gazebo reference="wheel_RR">
    <material>Gazebo/Yellow</material>
  </gazebo>

</robot>
